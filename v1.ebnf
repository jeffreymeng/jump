letter          ::= "A" ... "Z" | "a" ... "z" ;
digit           ::= "0" ... "9";
number          ::= ['-'] digit ['.' digit];
expression      ::= term | term "+" expression | term "-" expression ;
term            ::= factor | factor "*" term | factor "/" term ;
factor          ::= call | call "**" call ;
unary           ::= "+" base | "-" base ;

call            ::= base "(" [function_args] ")"
function_args   ::= [expression ","] expression

base            ::= "(" expression ")" | number ;

type_modifier   ::= "[]"
primitive       ::= "int" | "double" | "num"
type            ::= primitive | primitive [type_modifier]

assignment      ::= type identifier = expression;
statement       ::= expression | assignment;
