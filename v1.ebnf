letter          ::= "A" ... "Z" | "a" ... "z" ;
digit           ::= "0" ... "9";
number          ::= ['-'] digit ['.' digit];
expression      ::= term | term "+" expression | term "-" expression ;
term            ::= factor | factor "*" term | factor "/" term ;
factor          ::= base | base "**" base ;

// todo: support parameters, etc
function_call   ::= base "()"
base            ::= "(" expression ")" | number | "+" base | "-" base ;

typeModifier    ::= "[]"
primitive       ::= "int" | "double" | "num"
type            ::= primitive | primitive type_modifier

assignment      ::= type identifier = expression;
statement       ::= expression | assignment;
